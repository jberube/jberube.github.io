{"version":3,"sources":["store/reducers/images.js","store/actionTypes.js","store/initStore.js","store/actions/images.js","components/SearchBar.js","components/PhotoGalery.js","containers/App.js","serviceWorker.js","index.js"],"names":["initialState","searchTerm","window","location","hash","replace","images","currentPage","fetching","state","arguments","length","undefined","action","type","Object","objectSpread","concat","pageNumber","middlewares","thunkMiddleware","enhancers","applyMiddleware","apply","composedEnhancers","process","composeWithDevTools","compose","store","createStore","combineReducers","fetchPage","axios","get","params","method","api_key","tags","sort","privacy_filter","media","per_page","page","format","nojsoncallback","extras","then","res","_res$data","data","stat","photos","console","log","photo","map","id","title","thumbnail","url","url_q","width","width_q","height","height_q","original","url_o","width_o","height_o","doneSearchImages","err","error","Error","startFetchPage","SearchBar","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","autoBind","assertThisInitialized","evt","key","onSearch","setState","target","value","react_default","a","createElement","className","placeholder","onKeyPress","handleKeyPressed","onChange","handleChange","Component","PhotoGalery","_this$props","onFetchPage","lib_default","dataLength","next","loadMore","hasMore","loader","img","Col","xs","sm","md","lg","src","alt","Button","onClick","App","onhashchange","newURL","oldURL","bind","Row","src_components_SearchBar","src_components_PhotoGalery","connect","dispatch","ownProps","startSearchImages","searchImages","fetchImagesPage","Boolean","hostname","match","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4f5258d.chunk.js","sourcesContent":["import { START_SEARCH_IMAGES, DONE_SEARCH_IMAGES, START_FETCH_PAGE } from '../actionTypes';\r\n\r\nconst initialSearchTerm = window ?\r\n    window.location.hash.replace(/^#\\/?/, '') :\r\n    '';\r\n\r\nexport const initialState = {\r\n    searchTerm: initialSearchTerm,\r\n    images: [],\r\n    currentPage: 1,\r\n    fetching: false,\r\n};\r\n\r\nconst images = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case START_SEARCH_IMAGES:\r\n            return {\r\n                ...initialState,\r\n                searchTerm: action.searchTerm,\r\n            };\r\n        case DONE_SEARCH_IMAGES:\r\n            return {\r\n                ...state,\r\n                fetching: false,\r\n                images: state.images.concat(action.images),\r\n                currentPage: action.pageNumber,\r\n            };\r\n        case START_FETCH_PAGE:\r\n            return {\r\n                ...state,\r\n                fetching: true,\r\n                currentPage: action.pageNumber,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default images;\r\n","export const START_SEARCH_IMAGES = 'START_SEARCH_IMAGES';\r\nexport const DONE_SEARCH_IMAGES = 'DONE_SEARCH_IMAGES';\r\nexport const START_FETCH_PAGE = 'START_FETCH_NEXT_PAGE';\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport images from './reducers/images';\r\n\r\nconst middlewares = [thunkMiddleware]\r\nconst middlewareEnhancer = applyMiddleware(...middlewares)\r\nconst enhancers = [middlewareEnhancer]\r\nconst composedEnhancers = process.env === 'development' ? \r\n    composeWithDevTools(...enhancers) :\r\n    compose(...enhancers);\r\n\r\nexport const store = createStore(\r\n    combineReducers({\r\n        images,\r\n    }),\r\n    undefined,\r\n    composedEnhancers\r\n);\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    START_SEARCH_IMAGES,\r\n    DONE_SEARCH_IMAGES,\r\n    START_FETCH_PAGE,\r\n} from '../actionTypes';\r\n\r\nconst BASE_URL = 'https://api.flickr.com/services/rest/';\r\nconst FLICKR_API_KEY = 'b75a009cee4005c8157be53006653f82';\r\n\r\nconst doneSearchImages = (pageNumber, images) => ({\r\n    type: DONE_SEARCH_IMAGES,\r\n    pageNumber,\r\n    images,\r\n});\r\n\r\nconst fetchPage = (searchTerm, pageNumber) => {\r\n    // see: https://www.flickr.com/services/api/flickr.photos.search.html\r\n    return axios.get(BASE_URL, {\r\n        params: {\r\n            method: 'flickr.photos.search',\r\n            api_key: FLICKR_API_KEY,\r\n            tags: searchTerm,\r\n            sort: 'date-posted-desc',\r\n            privacy_filter: '1',\r\n            media: 'photos',\r\n            per_page: '6',\r\n            page: pageNumber,\r\n            format: 'json',\r\n            nojsoncallback: '1',\r\n            extras: 'url_q, url_o',\r\n        },\r\n    })\r\n    .then(res => {\r\n        const {stat, photos} = res.data;\r\n\r\n        if (stat !== 'ok') {\r\n            // TODO add error handling\r\n            console.log('ERROR');\r\n            return [];\r\n        }\r\n\r\n        return photos.photo.map(photo => ({\r\n            id: photo.id,\r\n            title: photo.title,\r\n            thumbnail: {\r\n                url: photo.url_q,\r\n                width: photo.width_q,\r\n                height: photo.height_q,\r\n            },\r\n            original: {\r\n                url: photo.url_o,\r\n                width: photo.width_o,\r\n                height: photo.height_o,\r\n            },\r\n        }));\r\n    })\r\n    .then(photos => {\r\n        return doneSearchImages(pageNumber, photos);\r\n    }, err => {\r\n        console.error(err);\r\n        throw new Error(`failed to retreive photos for searchTerm ${searchTerm}`);\r\n    });\r\n};\r\n\r\nconst startFetchPage = pageNumber => ({\r\n    type: START_FETCH_PAGE,\r\n    pageNumber,\r\n});\r\n\r\nexport const fetchImagesPage = (searchTerm, pageNumber) => dispatch => {\r\n    dispatch(startFetchPage(pageNumber));\r\n    fetchPage(searchTerm, pageNumber).then(dispatch);\r\n};\r\n\r\nconst startSearchImages = (searchTerm) => ({\r\n    type: START_SEARCH_IMAGES,\r\n    searchTerm,\r\n});\r\n\r\nexport const searchImages = searchTerm => dispatch => {\r\n    dispatch(startSearchImages(searchTerm));\r\n    dispatch(startFetchPage(1));\r\n    fetchPage(searchTerm, 1).then(dispatch);\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport autoBind from 'react-autobind';\r\n\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            searchTerm: props.searchTerm,\r\n        };\r\n        autoBind(this);\r\n    }\r\n\r\n    handleKeyPressed (evt) {\r\n        if (evt.key !== 'Enter') {\r\n            return;\r\n        }\r\n\r\n        this.props.onSearch(this.state.searchTerm);\r\n    }\r\n\r\n    handleChange (evt) {\r\n        this.setState({ searchTerm: evt.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-bar-container\">\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"keyword\"\r\n                    onKeyPress={this.handleKeyPressed}\r\n                    onChange={this.handleChange}\r\n                    value={this.props.searchTerm}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    onSearch: PropTypes.func.isRequired,\r\n    searchTerm: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport autoBind from 'react-autobind';\r\n\r\nimport './PhotoGalery.css';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nimport { Col, Button } from 'react-bootstrap';\r\n\r\nclass PhotoGalery extends Component {\r\n    constructor () {\r\n        super();\r\n        autoBind(this);\r\n    }\r\n\r\n    loadMore() {\r\n        const {onFetchPage, searchTerm, pageNumber} = this.props;\r\n        onFetchPage(searchTerm, pageNumber + 1);\r\n    }\r\n\r\n    render() {\r\n        const {images} = this.props;\r\n\r\n        return (\r\n            <div className=\"photo-galery-container\">\r\n                <InfiniteScroll\r\n                    dataLength={images.length}\r\n                    next={this.loadMore}\r\n                    hasMore={true}\r\n                    loader={<p>...</p>}\r\n                >\r\n                    {images.map(img => \r\n                        <Col key={img.id} xs={6} sm={4} md={3} lg={2}>\r\n                            <img src={img.thumbnail.url} alt={img.title}/>\r\n                        </Col>\r\n                    )}\r\n                </InfiniteScroll>\r\n                {images.length ? <Button onClick={this.loadMore}>more...</Button> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPhotoGalery.propTypes = {\r\n    images: PropTypes.array.isRequired,\r\n    searchTerm: PropTypes.string.isRequired,\r\n    pageNumber: PropTypes.number.isRequired,\r\n    onFetchPage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PhotoGalery;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nimport { searchImages, fetchImagesPage } from '../store/actions/images';\r\n\r\nimport './App.css';\r\nimport SearchBar from '../components/SearchBar';\r\nimport PhotoGalery from '../components/PhotoGalery';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        window.onhashchange = function(evt) {\r\n            if (evt.newURL === evt.oldURL) {\r\n                return;\r\n            }\r\n\r\n            const hash = window.location.hash.replace(/^#\\/?/, '');\r\n            this.props.onSearch(hash);\r\n        }.bind(this);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            images,\r\n            searchTerm,\r\n            pageNumber,\r\n            onSearch,\r\n            onFetchPage\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <SearchBar \r\n                            searchTerm={searchTerm}\r\n                            onSearch={onSearch}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                \r\n                <Row>\r\n                    <PhotoGalery\r\n                        images={images}\r\n                        searchTerm={searchTerm}\r\n                        pageNumber={pageNumber}\r\n                        onFetchPage={onFetchPage}\r\n                    />\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nApp.propTypes = {\r\n    images: PropTypes.array.isRequired,\r\n    searchTerm: PropTypes.string.isRequired,\r\n    pageNumber: PropTypes.number.isRequired,\r\n    onSearch: PropTypes.func.isRequired,\r\n    onFetchPage: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    images: state.images.images,\r\n    searchTerm: state.images.searchTerm,\r\n    pageNumber: state.images.currentPage,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    onSearch: searchTerm => dispatch(searchImages(searchTerm)),\r\n    onFetchPage: (searchTerm, pageNumber) => dispatch(fetchImagesPage(searchTerm, pageNumber)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './store/initStore';\r\n\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}